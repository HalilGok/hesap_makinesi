CCS PCM C Compiler, Version 5.015, 5967               01-Tem-19 20:11

               Filename:   C:\Users\HALÝL GÖK\Desktop\ELECTRONÝC WORKS\PIC çalýþmalarým\Hesap makinesi\main.lst

               ROM used:   1172 words (14%)
                           Largest free fragment is 2048
               RAM used:   16 (4%) at main() level
                           41 (11%) worst case
               Stack used: 7 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   44C
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  DATA 8A,39
0005:  DATA 6F,37
0006:  DATA F5,31
0007:  DATA 75,37
0008:  DATA 75,3D
0009:  DATA 3D,00
000A:  DATA 0C,10
000B:  DATA 4F,27
000C:  DATA 00,01
*
00F0:  MOVLW  10
00F1:  MOVWF  2F
00F2:  CLRF   77
00F3:  CLRF   7A
00F4:  RRF    2C,F
00F5:  RRF    2B,F
00F6:  BTFSS  03.0
00F7:  GOTO   0FE
00F8:  MOVF   2D,W
00F9:  ADDWF  77,F
00FA:  BTFSC  03.0
00FB:  INCF   7A,F
00FC:  MOVF   2E,W
00FD:  ADDWF  7A,F
00FE:  RRF    7A,F
00FF:  RRF    77,F
0100:  RRF    79,F
0101:  RRF    78,F
0102:  DECFSZ 2F,F
0103:  GOTO   0F4
0104:  RETURN
0105:  MOVF   0B,W
0106:  MOVWF  2B
0107:  BCF    0B.7
0108:  BSF    03.5
0109:  BSF    03.6
010A:  BSF    0C.7
010B:  BSF    0C.0
010C:  NOP
010D:  NOP
010E:  BCF    03.5
010F:  BCF    03.6
0110:  BTFSC  2B.7
0111:  BSF    0B.7
0112:  BSF    03.6
0113:  MOVF   0C,W
0114:  ANDLW  7F
0115:  BTFSC  03.2
0116:  GOTO   159
0117:  BCF    03.6
0118:  MOVWF  2B
0119:  BSF    03.6
011A:  MOVF   0D,W
011B:  BCF    03.6
011C:  MOVWF  2C
011D:  BSF    03.6
011E:  MOVF   0F,W
011F:  BCF    03.6
0120:  MOVWF  2D
0121:  MOVF   2B,W
0122:  MOVWF  37
0123:  CALL   0C4
0124:  MOVF   2C,W
0125:  BSF    03.6
0126:  MOVWF  0D
0127:  BCF    03.6
0128:  MOVF   2D,W
0129:  BSF    03.6
012A:  MOVWF  0F
012B:  BCF    03.6
012C:  MOVF   0B,W
012D:  MOVWF  2E
012E:  BCF    0B.7
012F:  BSF    03.5
0130:  BSF    03.6
0131:  BSF    0C.7
0132:  BSF    0C.0
0133:  NOP
0134:  NOP
0135:  BCF    03.5
0136:  BCF    03.6
0137:  BTFSC  2E.7
0138:  BSF    0B.7
0139:  BSF    03.6
013A:  RLF    0C,W
013B:  RLF    0E,W
013C:  ANDLW  7F
013D:  BTFSC  03.2
013E:  GOTO   159
013F:  BCF    03.6
0140:  MOVWF  2B
0141:  BSF    03.6
0142:  MOVF   0D,W
0143:  BCF    03.6
0144:  MOVWF  2C
0145:  BSF    03.6
0146:  MOVF   0F,W
0147:  BCF    03.6
0148:  MOVWF  2D
0149:  MOVF   2B,W
014A:  MOVWF  37
014B:  CALL   0C4
014C:  MOVF   2C,W
014D:  BSF    03.6
014E:  MOVWF  0D
014F:  BCF    03.6
0150:  MOVF   2D,W
0151:  BSF    03.6
0152:  MOVWF  0F
0153:  INCF   0D,F
0154:  BTFSC  03.2
0155:  INCF   0F,F
0156:  BCF    03.6
0157:  GOTO   105
0158:  BSF    03.6
0159:  BCF    03.6
015A:  RETURN
015B:  BTFSC  03.1
015C:  GOTO   160
015D:  MOVLW  3F
015E:  MOVWF  04
015F:  BCF    03.7
0160:  CLRF   77
0161:  CLRF   78
0162:  CLRF   79
0163:  CLRF   7A
0164:  CLRF   3F
0165:  CLRF   40
0166:  CLRF   41
0167:  CLRF   42
0168:  MOVF   3E,W
0169:  IORWF  3D,W
016A:  IORWF  3C,W
016B:  IORWF  3B,W
016C:  BTFSC  03.2
016D:  GOTO   19E
016E:  MOVLW  20
016F:  MOVWF  43
0170:  BCF    03.0
0171:  RLF    37,F
0172:  RLF    38,F
0173:  RLF    39,F
0174:  RLF    3A,F
0175:  RLF    3F,F
0176:  RLF    40,F
0177:  RLF    41,F
0178:  RLF    42,F
0179:  MOVF   3E,W
017A:  SUBWF  42,W
017B:  BTFSS  03.2
017C:  GOTO   187
017D:  MOVF   3D,W
017E:  SUBWF  41,W
017F:  BTFSS  03.2
0180:  GOTO   187
0181:  MOVF   3C,W
0182:  SUBWF  40,W
0183:  BTFSS  03.2
0184:  GOTO   187
0185:  MOVF   3B,W
0186:  SUBWF  3F,W
0187:  BTFSS  03.0
0188:  GOTO   198
0189:  MOVF   3B,W
018A:  SUBWF  3F,F
018B:  MOVF   3C,W
018C:  BTFSS  03.0
018D:  INCFSZ 3C,W
018E:  SUBWF  40,F
018F:  MOVF   3D,W
0190:  BTFSS  03.0
0191:  INCFSZ 3D,W
0192:  SUBWF  41,F
0193:  MOVF   3E,W
0194:  BTFSS  03.0
0195:  INCFSZ 3E,W
0196:  SUBWF  42,F
0197:  BSF    03.0
0198:  RLF    77,F
0199:  RLF    78,F
019A:  RLF    79,F
019B:  RLF    7A,F
019C:  DECFSZ 43,F
019D:  GOTO   170
019E:  MOVF   3F,W
019F:  MOVWF  00
01A0:  INCF   04,F
01A1:  MOVF   40,W
01A2:  MOVWF  00
01A3:  INCF   04,F
01A4:  MOVF   41,W
01A5:  MOVWF  00
01A6:  INCF   04,F
01A7:  MOVF   42,W
01A8:  MOVWF  00
01A9:  RETURN
01AA:  MOVF   04,W
01AB:  MOVWF  2F
01AC:  BTFSS  2E.7
01AD:  GOTO   1BB
01AE:  DECF   2F,F
01AF:  BSF    2F.5
01B0:  COMF   2B,F
01B1:  COMF   2C,F
01B2:  COMF   2D,F
01B3:  COMF   2E,F
01B4:  INCF   2B,F
01B5:  BTFSC  03.2
01B6:  INCF   2C,F
01B7:  BTFSC  03.2
01B8:  INCF   2D,F
01B9:  BTFSC  03.2
01BA:  INCF   2E,F
01BB:  MOVLW  3B
01BC:  MOVWF  36
01BD:  MOVLW  9A
01BE:  MOVWF  35
01BF:  MOVLW  CA
01C0:  MOVWF  34
01C1:  CLRF   33
01C2:  MOVLW  0A
01C3:  MOVWF  31
01C4:  BSF    03.1
01C5:  MOVLW  2B
01C6:  MOVWF  04
01C7:  BCF    03.7
01C8:  MOVF   2E,W
01C9:  MOVWF  3A
01CA:  MOVF   2D,W
01CB:  MOVWF  39
01CC:  MOVF   2C,W
01CD:  MOVWF  38
01CE:  MOVF   2B,W
01CF:  MOVWF  37
01D0:  MOVF   36,W
01D1:  MOVWF  3E
01D2:  MOVF   35,W
01D3:  MOVWF  3D
01D4:  MOVF   34,W
01D5:  MOVWF  3C
01D6:  MOVF   33,W
01D7:  MOVWF  3B
01D8:  CALL   15B
01D9:  MOVF   78,W
01DA:  MOVF   77,F
01DB:  BTFSS  03.2
01DC:  GOTO   1F0
01DD:  MOVF   31,W
01DE:  XORLW  01
01DF:  BTFSC  03.2
01E0:  GOTO   1F0
01E1:  MOVF   2F,W
01E2:  BTFSC  03.2
01E3:  GOTO   1F2
01E4:  ANDLW  0F
01E5:  SUBWF  31,W
01E6:  BTFSC  03.2
01E7:  GOTO   1EA
01E8:  BTFSC  03.0
01E9:  GOTO   20E
01EA:  BTFSC  2F.7
01EB:  GOTO   20E
01EC:  BTFSC  2F.6
01ED:  GOTO   1F2
01EE:  MOVLW  20
01EF:  GOTO   20A
01F0:  MOVLW  20
01F1:  ANDWF  2F,F
01F2:  BTFSS  2F.5
01F3:  GOTO   1FD
01F4:  BCF    2F.5
01F5:  MOVF   77,W
01F6:  MOVWF  2F
01F7:  MOVLW  2D
01F8:  MOVWF  37
01F9:  CALL   0C4
01FA:  MOVF   2F,W
01FB:  MOVWF  77
01FC:  CLRF   2F
01FD:  MOVLW  30
01FE:  BTFSS  2F.5
01FF:  GOTO   20A
0200:  BCF    2F.5
0201:  MOVF   77,W
0202:  MOVWF  2F
0203:  MOVLW  2D
0204:  MOVWF  37
0205:  CALL   0C4
0206:  MOVF   2F,W
0207:  MOVWF  77
0208:  CLRF   2F
0209:  MOVLW  30
020A:  ADDWF  77,F
020B:  MOVF   77,W
020C:  MOVWF  37
020D:  CALL   0C4
020E:  BCF    03.1
020F:  MOVF   36,W
0210:  MOVWF  3A
0211:  MOVF   35,W
0212:  MOVWF  39
0213:  MOVF   34,W
0214:  MOVWF  38
0215:  MOVF   33,W
0216:  MOVWF  37
0217:  CLRF   3E
0218:  CLRF   3D
0219:  CLRF   3C
021A:  MOVLW  0A
021B:  MOVWF  3B
021C:  CALL   15B
021D:  MOVF   7A,W
021E:  MOVWF  36
021F:  MOVF   79,W
0220:  MOVWF  35
0221:  MOVF   78,W
0222:  MOVWF  34
0223:  MOVF   77,W
0224:  MOVWF  33
0225:  DECFSZ 31,F
0226:  GOTO   1C4
0227:  RETURN
*
02AC:  CLRF   78
02AD:  CLRF   79
02AE:  CLRF   77
02AF:  CLRF   7A
02B0:  MOVF   2E,W
02B1:  BTFSS  03.2
02B2:  GOTO   2B6
02B3:  MOVF   2D,W
02B4:  BTFSC  03.2
02B5:  GOTO   2D0
02B6:  MOVLW  10
02B7:  MOVWF  2F
02B8:  BCF    03.0
02B9:  RLF    2B,F
02BA:  RLF    2C,F
02BB:  RLF    77,F
02BC:  RLF    7A,F
02BD:  MOVF   2E,W
02BE:  SUBWF  7A,W
02BF:  BTFSS  03.2
02C0:  GOTO   2C3
02C1:  MOVF   2D,W
02C2:  SUBWF  77,W
02C3:  BTFSS  03.0
02C4:  GOTO   2CC
02C5:  MOVF   2D,W
02C6:  SUBWF  77,F
02C7:  BTFSS  03.0
02C8:  DECF   7A,F
02C9:  MOVF   2E,W
02CA:  SUBWF  7A,F
02CB:  BSF    03.0
02CC:  RLF    78,F
02CD:  RLF    79,F
02CE:  DECFSZ 2F,F
02CF:  GOTO   2B8
*
02EF:  BCF    0A.0
02F0:  BSF    0A.1
02F1:  BCF    0A.2
02F2:  ADDWF  02,F
02F3:  GOTO   23D
02F4:  GOTO   25E
02F5:  GOTO   27F
02F6:  GOTO   2A4
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
000D:  MOVLW  38
000E:  MOVWF  04
000F:  BCF    03.7
0010:  MOVF   00,W
0011:  BTFSC  03.2
0012:  GOTO   021
0013:  MOVLW  01
0014:  MOVWF  78
0015:  CLRF   77
0016:  DECFSZ 77,F
0017:  GOTO   016
0018:  DECFSZ 78,F
0019:  GOTO   015
001A:  MOVLW  4A
001B:  MOVWF  77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  GOTO   01F
001F:  DECFSZ 00,F
0020:  GOTO   013
0021:  RETURN
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use fast_io(b) 
.................... #use fast_io(d) 
.................... #define use_portb_lcd TRUE 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003A:  MOVLW  0F
003B:  BSF    03.5
003C:  ANDWF  06,W
003D:  IORLW  F0
003E:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
003F:  BCF    03.5
0040:  BSF    06.2
....................    delay_cycles(1); 
0041:  NOP
....................    lcd_output_enable(1); 
0042:  BSF    06.0
....................    delay_cycles(1); 
0043:  NOP
....................    high = lcd_read_nibble(); 
0044:  CALL   02E
0045:  MOVF   78,W
0046:  MOVWF  3F
....................        
....................    lcd_output_enable(0); 
0047:  BCF    06.0
....................    delay_cycles(1); 
0048:  NOP
....................    lcd_output_enable(1); 
0049:  BSF    06.0
....................    delay_us(1); 
004A:  NOP
....................    low = lcd_read_nibble(); 
004B:  CALL   02E
004C:  MOVF   78,W
004D:  MOVWF  3E
....................        
....................    lcd_output_enable(0); 
004E:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
004F:  MOVLW  0F
0050:  BSF    03.5
0051:  ANDWF  06,W
0052:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0053:  BCF    03.5
0054:  SWAPF  3F,W
0055:  MOVWF  77
0056:  MOVLW  F0
0057:  ANDWF  77,F
0058:  MOVF   77,W
0059:  IORWF  3E,W
005A:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
002E:  MOVF   06,W
002F:  MOVWF  77
0030:  SWAPF  06,W
0031:  ANDLW  0F
0032:  MOVWF  78
....................   #endif 
0033:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0022:  SWAPF  3F,W
0023:  ANDLW  F0
0024:  MOVWF  77
0025:  MOVLW  0F
0026:  ANDWF  06,W
0027:  IORWF  77,W
0028:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0029:  NOP
....................    lcd_output_enable(1); 
002A:  BSF    06.0
....................    delay_us(2); 
002B:  GOTO   02C
....................    lcd_output_enable(0); 
002C:  BCF    06.0
002D:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0034:  BSF    03.5
0035:  BCF    06.0
....................    lcd_rs_tris(); 
0036:  BCF    06.1
....................    lcd_rw_tris(); 
0037:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0038:  BCF    03.5
0039:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
005B:  MOVF   78,W
005C:  MOVWF  3E
005D:  BTFSC  3E.7
005E:  GOTO   03A
....................    lcd_output_rs(address); 
005F:  BTFSS  3C.0
0060:  BCF    06.1
0061:  BTFSC  3C.0
0062:  BSF    06.1
....................    delay_cycles(1); 
0063:  NOP
....................    lcd_output_rw(0); 
0064:  BCF    06.2
....................    delay_cycles(1); 
0065:  NOP
....................    lcd_output_enable(0); 
0066:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0067:  SWAPF  3D,W
0068:  MOVWF  3E
0069:  MOVLW  0F
006A:  ANDWF  3E,F
006B:  MOVF   3E,W
006C:  MOVWF  3F
006D:  CALL   022
....................    lcd_send_nibble(n & 0xf); 
006E:  MOVF   3D,W
006F:  ANDLW  0F
0070:  MOVWF  3E
0071:  MOVWF  3F
0072:  CALL   022
0073:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0074:  MOVLW  28
0075:  MOVWF  2C
0076:  MOVLW  0C
0077:  MOVWF  2D
0078:  MOVLW  01
0079:  MOVWF  2E
007A:  MOVLW  06
007B:  MOVWF  2F
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
007C:  BCF    06.0
....................    lcd_output_rs(0); 
007D:  BCF    06.1
....................    lcd_output_rw(0); 
007E:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
007F:  MOVLW  0F
0080:  BSF    03.5
0081:  ANDWF  06,W
0082:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0083:  BCF    06.0
....................    lcd_rs_tris(); 
0084:  BCF    06.1
....................    lcd_rw_tris(); 
0085:  BCF    06.2
....................  #endif 
....................      
....................    delay_ms(15); 
0086:  MOVLW  0F
0087:  BCF    03.5
0088:  MOVWF  38
0089:  CALL   00D
....................    for(i=1;i<=3;++i) 
008A:  MOVLW  01
008B:  MOVWF  2B
008C:  MOVF   2B,W
008D:  SUBLW  03
008E:  BTFSS  03.0
008F:  GOTO   098
....................    { 
....................        lcd_send_nibble(3); 
0090:  MOVLW  03
0091:  MOVWF  3F
0092:  CALL   022
....................        delay_ms(5); 
0093:  MOVLW  05
0094:  MOVWF  38
0095:  CALL   00D
0096:  INCF   2B,F
0097:  GOTO   08C
....................    } 
....................     
....................    lcd_send_nibble(2); 
0098:  MOVLW  02
0099:  MOVWF  3F
009A:  CALL   022
....................    delay_ms(5); 
009B:  MOVLW  05
009C:  MOVWF  38
009D:  CALL   00D
....................    for(i=0;i<=3;++i) 
009E:  CLRF   2B
009F:  MOVF   2B,W
00A0:  SUBLW  03
00A1:  BTFSS  03.0
00A2:  GOTO   0AF
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A3:  MOVLW  2C
00A4:  ADDWF  2B,W
00A5:  MOVWF  04
00A6:  BCF    03.7
00A7:  MOVF   00,W
00A8:  MOVWF  30
00A9:  CLRF   3C
00AA:  MOVF   30,W
00AB:  MOVWF  3D
00AC:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AD:  INCF   2B,F
00AE:  GOTO   09F
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   491 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B2:  DECFSZ 39,W
00B3:  GOTO   0B5
00B4:  GOTO   0B8
....................       address=LCD_LINE_TWO; 
00B5:  MOVLW  40
00B6:  MOVWF  3A
00B7:  GOTO   0B9
....................    else 
....................       address=0; 
00B8:  CLRF   3A
....................       
....................    address+=x-1; 
00B9:  MOVLW  01
00BA:  SUBWF  38,W
00BB:  ADDWF  3A,F
....................    lcd_send_byte(0,0x80|address); 
00BC:  MOVF   3A,W
00BD:  IORLW  80
00BE:  MOVWF  3B
00BF:  CLRF   3C
00C0:  MOVF   3B,W
00C1:  MOVWF  3D
00C2:  CALL   034
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C3:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C4:  MOVF   37,W
00C5:  XORLW  07
00C6:  BTFSC  03.2
00C7:  GOTO   0D2
00C8:  XORLW  0B
00C9:  BTFSC  03.2
00CA:  GOTO   0D7
00CB:  XORLW  06
00CC:  BTFSC  03.2
00CD:  GOTO   0DF
00CE:  XORLW  02
00CF:  BTFSC  03.2
00D0:  GOTO   0E5
00D1:  GOTO   0EA
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D2:  MOVLW  01
00D3:  MOVWF  38
00D4:  MOVWF  39
00D5:  CALL   0B2
00D6:  GOTO   0EF
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D7:  CLRF   3C
00D8:  MOVLW  01
00D9:  MOVWF  3D
00DA:  CALL   034
....................                      delay_ms(2); 
00DB:  MOVLW  02
00DC:  MOVWF  38
00DD:  CALL   00D
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DE:  GOTO   0EF
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00DF:  MOVLW  01
00E0:  MOVWF  38
00E1:  MOVLW  02
00E2:  MOVWF  39
00E3:  CALL   0B2
00E4:  GOTO   0EF
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E5:  CLRF   3C
00E6:  MOVLW  10
00E7:  MOVWF  3D
00E8:  CALL   034
00E9:  GOTO   0EF
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00EA:  MOVLW  01
00EB:  MOVWF  3C
00EC:  MOVF   37,W
00ED:  MOVWF  3D
00EE:  CALL   034
....................      #endif 
....................    } 
00EF:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... int16 sayi1=0; 
.................... int16  sayi=0; 
.................... int x=0; 
.................... int islem=0; 
....................  int32 sonuc=0; 
....................  
.................... int sonuc_bul() 
.................... {  
.................... delay_ms(1000); 
*
0228:  MOVLW  04
0229:  MOVWF  2B
022A:  MOVLW  FA
022B:  MOVWF  38
022C:  CALL   00D
022D:  DECFSZ 2B,F
022E:  GOTO   22A
.................... printf(lcd_putc,"\nsonucunuz="); 
022F:  MOVLW  04
0230:  BSF    03.6
0231:  MOVWF  0D
0232:  MOVLW  00
0233:  MOVWF  0F
0234:  BCF    03.6
0235:  CALL   105
....................  switch (islem) 
0236:  MOVLW  01
0237:  SUBWF  25,W
0238:  ADDLW  FC
0239:  BTFSC  03.0
023A:  GOTO   2EB
023B:  ADDLW  04
023C:  GOTO   2EF
....................  { 
....................   case 1: 
....................     sonuc=(sayi1)+(sayi); printf(lcd_putc,"%ld",sonuc);sayi1=0;sayi=0;x=0;islem=0;sonuc=0;break; 
023D:  MOVF   22,W
023E:  ADDWF  20,W
023F:  MOVWF  26
0240:  MOVF   21,W
0241:  MOVWF  27
0242:  MOVF   23,W
0243:  BTFSC  03.0
0244:  INCFSZ 23,W
0245:  ADDWF  27,F
0246:  CLRF   28
0247:  CLRF   29
0248:  MOVLW  41
0249:  MOVWF  04
024A:  MOVF   29,W
024B:  MOVWF  2E
024C:  MOVF   28,W
024D:  MOVWF  2D
024E:  MOVF   27,W
024F:  MOVWF  2C
0250:  MOVF   26,W
0251:  MOVWF  2B
0252:  CALL   1AA
0253:  CLRF   21
0254:  CLRF   20
0255:  CLRF   23
0256:  CLRF   22
0257:  CLRF   24
0258:  CLRF   25
0259:  CLRF   29
025A:  CLRF   28
025B:  CLRF   27
025C:  CLRF   26
025D:  GOTO   2EB
....................   case 2: 
....................     sonuc=sayi1-sayi; printf(lcd_putc,"%ld",sonuc);sayi1=0;sayi=0;x=0;islem=0;sonuc=0; break; 
025E:  MOVF   22,W
025F:  SUBWF  20,W
0260:  MOVWF  26
0261:  MOVF   21,W
0262:  MOVWF  27
0263:  MOVF   23,W
0264:  BTFSS  03.0
0265:  INCFSZ 23,W
0266:  SUBWF  27,F
0267:  CLRF   28
0268:  CLRF   29
0269:  MOVLW  41
026A:  MOVWF  04
026B:  MOVF   29,W
026C:  MOVWF  2E
026D:  MOVF   28,W
026E:  MOVWF  2D
026F:  MOVF   27,W
0270:  MOVWF  2C
0271:  MOVF   26,W
0272:  MOVWF  2B
0273:  CALL   1AA
0274:  CLRF   21
0275:  CLRF   20
0276:  CLRF   23
0277:  CLRF   22
0278:  CLRF   24
0279:  CLRF   25
027A:  CLRF   29
027B:  CLRF   28
027C:  CLRF   27
027D:  CLRF   26
027E:  GOTO   2EB
....................   case 3: 
....................     sonuc=sayi1*sayi; printf(lcd_putc,"%ld",sonuc);sayi1=0;sayi=0;x=0;islem=0;sonuc=0; break;   
027F:  MOVF   21,W
0280:  MOVWF  2C
0281:  MOVF   20,W
0282:  MOVWF  2B
0283:  MOVF   23,W
0284:  MOVWF  2E
0285:  MOVF   22,W
0286:  MOVWF  2D
0287:  CALL   0F0
0288:  CLRF   29
0289:  CLRF   28
028A:  MOVF   79,W
028B:  MOVWF  27
028C:  MOVF   78,W
028D:  MOVWF  26
028E:  MOVLW  41
028F:  MOVWF  04
0290:  MOVF   29,W
0291:  MOVWF  2E
0292:  MOVF   28,W
0293:  MOVWF  2D
0294:  MOVF   27,W
0295:  MOVWF  2C
0296:  MOVF   26,W
0297:  MOVWF  2B
0298:  CALL   1AA
0299:  CLRF   21
029A:  CLRF   20
029B:  CLRF   23
029C:  CLRF   22
029D:  CLRF   24
029E:  CLRF   25
029F:  CLRF   29
02A0:  CLRF   28
02A1:  CLRF   27
02A2:  CLRF   26
02A3:  GOTO   2EB
....................   case 4: 
....................     sonuc=sayi1/sayi;printf(lcd_putc,"%ld",sonuc);sayi1=0;sayi=0;x=0;islem=0;sonuc=0; break; 
02A4:  MOVF   21,W
02A5:  MOVWF  2C
02A6:  MOVF   20,W
02A7:  MOVWF  2B
02A8:  MOVF   23,W
02A9:  MOVWF  2E
02AA:  MOVF   22,W
02AB:  MOVWF  2D
*
02D0:  CLRF   29
02D1:  CLRF   28
02D2:  MOVF   79,W
02D3:  MOVWF  27
02D4:  MOVF   78,W
02D5:  MOVWF  26
02D6:  MOVLW  41
02D7:  MOVWF  04
02D8:  MOVF   29,W
02D9:  MOVWF  2E
02DA:  MOVF   28,W
02DB:  MOVWF  2D
02DC:  MOVF   27,W
02DD:  MOVWF  2C
02DE:  MOVF   26,W
02DF:  MOVWF  2B
02E0:  CALL   1AA
02E1:  CLRF   21
02E2:  CLRF   20
02E3:  CLRF   23
02E4:  CLRF   22
02E5:  CLRF   24
02E6:  CLRF   25
02E7:  CLRF   29
02E8:  CLRF   28
02E9:  CLRF   27
02EA:  CLRF   26
.................... }  
....................  islem=0; 
02EB:  CLRF   25
02EC:  BCF    0A.3
02ED:  BCF    0A.4
02EE:  GOTO   437 (RETURN)
.................... } 
....................  
.................... char tus() 
.................... { 
....................      output_high(pin_d0); 
*
02F7:  BSF    08.0
....................      if(input(pin_d4)){ while(input(pin_d4)); printf(lcd_putc,"7"); x=7; sayi=sayi*10 +x;  }  // 7 
02F8:  BTFSS  08.4
02F9:  GOTO   310
02FA:  BTFSC  08.4
02FB:  GOTO   2FA
02FC:  MOVLW  37
02FD:  MOVWF  37
02FE:  CALL   0C4
02FF:  MOVLW  07
0300:  MOVWF  24
0301:  MOVF   23,W
0302:  MOVWF  2C
0303:  MOVF   22,W
0304:  MOVWF  2B
0305:  CLRF   2E
0306:  MOVLW  0A
0307:  MOVWF  2D
0308:  CALL   0F0
0309:  MOVF   24,W
030A:  ADDWF  78,W
030B:  MOVWF  22
030C:  MOVF   79,W
030D:  MOVWF  23
030E:  BTFSC  03.0
030F:  INCF   23,F
....................      if(input(pin_d5)){ while(input(pin_d5)); printf(lcd_putc,"8");  x=8; sayi=sayi*10 +x; }   // 8 
0310:  BTFSS  08.5
0311:  GOTO   328
0312:  BTFSC  08.5
0313:  GOTO   312
0314:  MOVLW  38
0315:  MOVWF  37
0316:  CALL   0C4
0317:  MOVLW  08
0318:  MOVWF  24
0319:  MOVF   23,W
031A:  MOVWF  2C
031B:  MOVF   22,W
031C:  MOVWF  2B
031D:  CLRF   2E
031E:  MOVLW  0A
031F:  MOVWF  2D
0320:  CALL   0F0
0321:  MOVF   24,W
0322:  ADDWF  78,W
0323:  MOVWF  22
0324:  MOVF   79,W
0325:  MOVWF  23
0326:  BTFSC  03.0
0327:  INCF   23,F
....................      if(input(pin_d6)){ while(input(pin_d6)); printf(lcd_putc,"9");  x=9; sayi=sayi*10 +x;}   // 9 
0328:  BTFSS  08.6
0329:  GOTO   340
032A:  BTFSC  08.6
032B:  GOTO   32A
032C:  MOVLW  39
032D:  MOVWF  37
032E:  CALL   0C4
032F:  MOVLW  09
0330:  MOVWF  24
0331:  MOVF   23,W
0332:  MOVWF  2C
0333:  MOVF   22,W
0334:  MOVWF  2B
0335:  CLRF   2E
0336:  MOVLW  0A
0337:  MOVWF  2D
0338:  CALL   0F0
0339:  MOVF   24,W
033A:  ADDWF  78,W
033B:  MOVWF  22
033C:  MOVF   79,W
033D:  MOVWF  23
033E:  BTFSC  03.0
033F:  INCF   23,F
....................      if(input(pin_d7)){ while(input(pin_d7)); printf(lcd_putc,"/");   
0340:  BTFSS  08.7
0341:  GOTO   34F
0342:  BTFSC  08.7
0343:  GOTO   342
0344:  MOVLW  2F
0345:  MOVWF  37
0346:  CALL   0C4
....................       sayi1=sayi; 
0347:  MOVF   23,W
0348:  MOVWF  21
0349:  MOVF   22,W
034A:  MOVWF  20
....................       islem=4; 
034B:  MOVLW  04
034C:  MOVWF  25
....................       sayi=0; 
034D:  CLRF   23
034E:  CLRF   22
....................        
....................      }   // bölme 
....................       output_low(pin_d0); 
034F:  BCF    08.0
....................        
....................       output_high(pin_d1); 
0350:  BSF    08.1
....................      if(input(pin_d4)){ while(input(pin_d4)); printf(lcd_putc,"4"); x=4; sayi=sayi*10 +x;}  // 4 
0351:  BTFSS  08.4
0352:  GOTO   369
0353:  BTFSC  08.4
0354:  GOTO   353
0355:  MOVLW  34
0356:  MOVWF  37
0357:  CALL   0C4
0358:  MOVLW  04
0359:  MOVWF  24
035A:  MOVF   23,W
035B:  MOVWF  2C
035C:  MOVF   22,W
035D:  MOVWF  2B
035E:  CLRF   2E
035F:  MOVLW  0A
0360:  MOVWF  2D
0361:  CALL   0F0
0362:  MOVF   24,W
0363:  ADDWF  78,W
0364:  MOVWF  22
0365:  MOVF   79,W
0366:  MOVWF  23
0367:  BTFSC  03.0
0368:  INCF   23,F
....................      if(input(pin_d5)){ while(input(pin_d5)); printf(lcd_putc,"5");  x=5; sayi=sayi*10 +x;}   // 5 
0369:  BTFSS  08.5
036A:  GOTO   381
036B:  BTFSC  08.5
036C:  GOTO   36B
036D:  MOVLW  35
036E:  MOVWF  37
036F:  CALL   0C4
0370:  MOVLW  05
0371:  MOVWF  24
0372:  MOVF   23,W
0373:  MOVWF  2C
0374:  MOVF   22,W
0375:  MOVWF  2B
0376:  CLRF   2E
0377:  MOVLW  0A
0378:  MOVWF  2D
0379:  CALL   0F0
037A:  MOVF   24,W
037B:  ADDWF  78,W
037C:  MOVWF  22
037D:  MOVF   79,W
037E:  MOVWF  23
037F:  BTFSC  03.0
0380:  INCF   23,F
....................      if(input(pin_d6)){ while(input(pin_d6)); printf(lcd_putc,"6");  x=6; sayi=sayi*10 +x;}   //6 
0381:  BTFSS  08.6
0382:  GOTO   399
0383:  BTFSC  08.6
0384:  GOTO   383
0385:  MOVLW  36
0386:  MOVWF  37
0387:  CALL   0C4
0388:  MOVLW  06
0389:  MOVWF  24
038A:  MOVF   23,W
038B:  MOVWF  2C
038C:  MOVF   22,W
038D:  MOVWF  2B
038E:  CLRF   2E
038F:  MOVLW  0A
0390:  MOVWF  2D
0391:  CALL   0F0
0392:  MOVF   24,W
0393:  ADDWF  78,W
0394:  MOVWF  22
0395:  MOVF   79,W
0396:  MOVWF  23
0397:  BTFSC  03.0
0398:  INCF   23,F
....................      if(input(pin_d7)){ while(input(pin_d7)); printf(lcd_putc,"*"); 
0399:  BTFSS  08.7
039A:  GOTO   3A8
039B:  BTFSC  08.7
039C:  GOTO   39B
039D:  MOVLW  2A
039E:  MOVWF  37
039F:  CALL   0C4
....................      sayi1=sayi; 
03A0:  MOVF   23,W
03A1:  MOVWF  21
03A2:  MOVF   22,W
03A3:  MOVWF  20
....................      islem=3; 
03A4:  MOVLW  03
03A5:  MOVWF  25
....................      sayi=0;}  // çarpma 
03A6:  CLRF   23
03A7:  CLRF   22
....................       output_low(pin_d1); 
03A8:  BCF    08.1
....................        
....................       output_high(pin_d2); 
03A9:  BSF    08.2
....................      if(input(pin_d4)){ while(input(pin_d4)); printf(lcd_putc,"1"); x=1; sayi=sayi*10 +x;} // 1 
03AA:  BTFSS  08.4
03AB:  GOTO   3C2
03AC:  BTFSC  08.4
03AD:  GOTO   3AC
03AE:  MOVLW  31
03AF:  MOVWF  37
03B0:  CALL   0C4
03B1:  MOVLW  01
03B2:  MOVWF  24
03B3:  MOVF   23,W
03B4:  MOVWF  2C
03B5:  MOVF   22,W
03B6:  MOVWF  2B
03B7:  CLRF   2E
03B8:  MOVLW  0A
03B9:  MOVWF  2D
03BA:  CALL   0F0
03BB:  MOVF   24,W
03BC:  ADDWF  78,W
03BD:  MOVWF  22
03BE:  MOVF   79,W
03BF:  MOVWF  23
03C0:  BTFSC  03.0
03C1:  INCF   23,F
....................      if(input(pin_d5)){ while(input(pin_d5)); printf(lcd_putc,"2");  x=2; sayi=sayi*10 +x;}  //2 
03C2:  BTFSS  08.5
03C3:  GOTO   3DA
03C4:  BTFSC  08.5
03C5:  GOTO   3C4
03C6:  MOVLW  32
03C7:  MOVWF  37
03C8:  CALL   0C4
03C9:  MOVLW  02
03CA:  MOVWF  24
03CB:  MOVF   23,W
03CC:  MOVWF  2C
03CD:  MOVF   22,W
03CE:  MOVWF  2B
03CF:  CLRF   2E
03D0:  MOVLW  0A
03D1:  MOVWF  2D
03D2:  CALL   0F0
03D3:  MOVF   24,W
03D4:  ADDWF  78,W
03D5:  MOVWF  22
03D6:  MOVF   79,W
03D7:  MOVWF  23
03D8:  BTFSC  03.0
03D9:  INCF   23,F
....................      if(input(pin_d6)){ while(input(pin_d6)); printf(lcd_putc,"3");  x=3; sayi=sayi*10 +x;} //3 
03DA:  BTFSS  08.6
03DB:  GOTO   3F2
03DC:  BTFSC  08.6
03DD:  GOTO   3DC
03DE:  MOVLW  33
03DF:  MOVWF  37
03E0:  CALL   0C4
03E1:  MOVLW  03
03E2:  MOVWF  24
03E3:  MOVF   23,W
03E4:  MOVWF  2C
03E5:  MOVF   22,W
03E6:  MOVWF  2B
03E7:  CLRF   2E
03E8:  MOVLW  0A
03E9:  MOVWF  2D
03EA:  CALL   0F0
03EB:  MOVF   24,W
03EC:  ADDWF  78,W
03ED:  MOVWF  22
03EE:  MOVF   79,W
03EF:  MOVWF  23
03F0:  BTFSC  03.0
03F1:  INCF   23,F
....................      if(input(pin_d7)){ while(input(pin_d7)); printf(lcd_putc,"-");  
03F2:  BTFSS  08.7
03F3:  GOTO   401
03F4:  BTFSC  08.7
03F5:  GOTO   3F4
03F6:  MOVLW  2D
03F7:  MOVWF  37
03F8:  CALL   0C4
....................      sayi1=sayi; 
03F9:  MOVF   23,W
03FA:  MOVWF  21
03FB:  MOVF   22,W
03FC:  MOVWF  20
....................      islem=2; 
03FD:  MOVLW  02
03FE:  MOVWF  25
....................      sayi=0; 
03FF:  CLRF   23
0400:  CLRF   22
....................       } //- çýkarma 
....................       output_low(pin_d2); 
0401:  BCF    08.2
....................        
....................        output_high(pin_d3); 
0402:  BSF    08.3
....................      if(input(pin_d4)){ while(input(pin_d4)); printf(lcd_putc,"\f ON");printf(lcd_putc,"\f");sayi1=0;sayi=0;x=0;islem=0;sonuc=0;}  
0403:  BTFSS  08.4
0404:  GOTO   41B
0405:  BTFSC  08.4
0406:  GOTO   405
0407:  MOVLW  0A
0408:  BSF    03.6
0409:  MOVWF  0D
040A:  MOVLW  00
040B:  MOVWF  0F
040C:  BCF    03.6
040D:  CALL   105
040E:  MOVLW  0C
040F:  MOVWF  37
0410:  CALL   0C4
0411:  CLRF   21
0412:  CLRF   20
0413:  CLRF   23
0414:  CLRF   22
0415:  CLRF   24
0416:  CLRF   25
0417:  CLRF   29
0418:  CLRF   28
0419:  CLRF   27
041A:  CLRF   26
....................      if(input(pin_d5)){ while(input(pin_d5)); printf(lcd_putc,"0"); x=0; sayi=sayi*10 +x;} 
041B:  BTFSS  08.5
041C:  GOTO   432
041D:  BTFSC  08.5
041E:  GOTO   41D
041F:  MOVLW  30
0420:  MOVWF  37
0421:  CALL   0C4
0422:  CLRF   24
0423:  MOVF   23,W
0424:  MOVWF  2C
0425:  MOVF   22,W
0426:  MOVWF  2B
0427:  CLRF   2E
0428:  MOVLW  0A
0429:  MOVWF  2D
042A:  CALL   0F0
042B:  MOVF   24,W
042C:  ADDWF  78,W
042D:  MOVWF  22
042E:  MOVF   79,W
042F:  MOVWF  23
0430:  BTFSC  03.0
0431:  INCF   23,F
....................      if(input(pin_d6)){ while(input(pin_d6)); 
0432:  BTFSS  08.6
0433:  GOTO   437
0434:  BTFSC  08.6
0435:  GOTO   434
....................      sayi1; 
....................       sonuc_bul(); 
0436:  GOTO   228
....................       } 
....................      if(input(pin_d7)){while(input(pin_d7)); printf(lcd_putc,"+"); 
0437:  BTFSS  08.7
0438:  GOTO   446
0439:  BTFSC  08.7
043A:  GOTO   439
043B:  MOVLW  2B
043C:  MOVWF  37
043D:  CALL   0C4
....................      sayi1=sayi; 
043E:  MOVF   23,W
043F:  MOVWF  21
0440:  MOVF   22,W
0441:  MOVWF  20
....................       islem=1; 
0442:  MOVLW  01
0443:  MOVWF  25
....................       sayi=0; 
0444:  CLRF   23
0445:  CLRF   22
....................        
....................     } 
....................       output_low(pin_d3); 
0446:  BCF    08.3
....................        
....................       return sayi,sayi1,islem; 
0447:  MOVF   25,W
0448:  MOVWF  78
0449:  BCF    0A.3
044A:  BCF    0A.4
044B:  GOTO   492 (RETURN)
....................  
.................... } 
....................  
....................  
....................   
.................... void main() 
044C:  MOVF   03,W
044D:  ANDLW  1F
044E:  MOVWF  03
044F:  CLRF   21
0450:  CLRF   20
0451:  CLRF   23
0452:  CLRF   22
0453:  CLRF   24
0454:  CLRF   25
0455:  CLRF   29
0456:  CLRF   28
0457:  CLRF   27
0458:  CLRF   26
0459:  MOVLW  FF
045A:  MOVWF  2A
045B:  BSF    03.5
045C:  BSF    1F.0
045D:  BSF    1F.1
045E:  BSF    1F.2
045F:  BCF    1F.3
0460:  MOVLW  07
0461:  MOVWF  1C
0462:  BCF    03.7
.................... { 
....................  
.................... setup_psp(PSP_DISABLED); // PSP birimi devre dýþý 
0463:  BCF    09.4
.................... setup_spi(SPI_SS_DISABLED); // SPI birimi devre dýþý 
0464:  BCF    03.5
0465:  BCF    14.5
0466:  BCF    2A.5
0467:  MOVF   2A,W
0468:  BSF    03.5
0469:  MOVWF  07
046A:  BCF    03.5
046B:  BSF    2A.4
046C:  MOVF   2A,W
046D:  BSF    03.5
046E:  MOVWF  07
046F:  BCF    03.5
0470:  BCF    2A.3
0471:  MOVF   2A,W
0472:  BSF    03.5
0473:  MOVWF  07
0474:  MOVLW  01
0475:  BCF    03.5
0476:  MOVWF  14
0477:  MOVLW  00
0478:  BSF    03.5
0479:  MOVWF  14
.................... setup_timer_1(T1_DISABLED); // T1 zamanlayýcýsý devre dýþý 
047A:  BCF    03.5
047B:  CLRF   10
.................... setup_timer_2(T2_DISABLED,0,1); // T2 zamanlayýcýsý devre dýþý 
047C:  MOVWF  78
047D:  MOVWF  12
047E:  MOVLW  00
047F:  BSF    03.5
0480:  MOVWF  12
.................... setup_adc_ports(NO_ANALOGS); // ANALOG giriþ yok 
0481:  BSF    1F.0
0482:  BSF    1F.1
0483:  BSF    1F.2
0484:  BCF    1F.3
.................... setup_adc(ADC_OFF); // ADC birimi devre dýþý 
0485:  BCF    03.5
0486:  BCF    1F.0
.................... setup_CCP1(CCP_OFF); // CCP1 birimi devre dýþý 
0487:  MOVLW  F0
0488:  ANDWF  17,F
.................... setup_CCP2(CCP_OFF); // CCP2 birimi devre dýþý 
0489:  ANDWF  1D,F
....................  
.................... set_tris_b(0x00); 
048A:  MOVLW  00
048B:  BSF    03.5
048C:  MOVWF  06
.................... set_tris_d(0xF0);  // ilk dört port çýkýþ kalan portlar giriþ 
048D:  MOVLW  F0
048E:  MOVWF  08
....................  
.................... lcd_init(); 
048F:  BCF    03.5
0490:  GOTO   074
....................  
....................    while(TRUE) 
....................    { 
....................      tus(); 
0491:  GOTO   2F7
0492:  GOTO   491
....................     
....................       
....................       
....................    } 
....................  
.................... } 
0493:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
